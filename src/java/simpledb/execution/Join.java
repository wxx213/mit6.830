package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;
    private OpIterator leftIterator;
    private OpIterator rightIterator;
    private TupleDesc mergedTupleDesc;
    private Tuple currentLeftTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinPredicate = p;
        leftIterator = child1;
        rightIterator = child2;
        TupleDesc td1 = leftIterator.getTupleDesc();
        TupleDesc td2 = rightIterator.getTupleDesc();
        mergedTupleDesc = TupleDesc.merge(td1, td2);
        currentLeftTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return null;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return null;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return null;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return this.mergedTupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        this.leftIterator.open();
        this.rightIterator.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        this.leftIterator.close();
        this.rightIterator.close();

    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        this.leftIterator.rewind();
        this.rightIterator.rewind();
        this.currentLeftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple rTuple;
        while (leftIterator.hasNext() || (rightIterator.hasNext() && currentLeftTuple != null)) {
            if (!(rightIterator.hasNext() && currentLeftTuple != null)) {
                currentLeftTuple = leftIterator.next();
                if (!rightIterator.hasNext()) {
                    rightIterator.rewind();
                }
            }
            while (rightIterator.hasNext()) {
                rTuple = rightIterator.next();
                if (this.joinPredicate.filter(currentLeftTuple, rTuple)) {
                    Tuple tuple = new Tuple(this.mergedTupleDesc);
                    int ll = leftIterator.getTupleDesc().numFields();
                    int lr = rightIterator.getTupleDesc().numFields();
                    for (int i=0;i<ll;i++) {
                        tuple.setField(i, currentLeftTuple.getField(i));
                    }
                    for (int i=ll;i<ll+lr;i++) {
                        tuple.setField(i, rTuple.getField(i-ll));
                    }
                    return tuple;
                }
            }
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
